---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 4/17/2025 10:45 PM
---

local health_ratio = 0.5
local batch_count = 24
local repair_pack_data

local get_repair_pack_prototypes = function()
    if not repair_pack_data then
        repair_pack_data = {}
        local entities = prototypes.get_item_filtered({
            {
                filter = "type",
                type = "repair-tool"
            }
        })
        for _, repair in pairs(entities) do
            repair_pack_data[repair.name] = true
        end
    end
end

local add_to_repair_list = function(event)
    local entity = event.entity
    if entity and entity.valid and entity.get_health_ratio() < health_ratio then
        local surface = entity.surface

        if entity.surface and entity.surface.platform and
                not storage.platform_damaged_entities[surface.index][entity.unit_number] and
                entity.surface.platform.force.name == entity.force.name
        then
            storage.platform_damaged_entities[surface.index][entity.unit_number] = entity
        end
    end
end

local index_damaged_entities = function(event) 
    storage.platform_damaged_entities = storage.platform_damaged_entities or {}
    local damaged_entities = storage.platform_damaged_entities
    health_ratio = settings.global['aspr-health-ratio'].value
    batch_count = settings.global['aspr-repair-per-batch'].value
    local i = 0
    for _, surface in pairs(game.surfaces) do
        if surface.platform then
            local owner_force = surface.platform.force
            local entities = surface.find_entities_filtered({force = owner_force})
            damaged_entities[surface.index] = {}
            for _, entity in pairs(entities) do
                if entity.unit_number and entity.get_health_ratio() and entity.get_health_ratio() < health_ratio then
                    i = i + 1
                    damaged_entities[surface.index][entity.unit_number] = entity
                end
            end
        end
    end

    get_repair_pack_prototypes()
    print("Setting health_ratio: "..health_ratio)
    print("Setting batch_count: "..batch_count)
    print("Indexed damaged entities: "..i)
    print(serpent.block(repair_pack_data))

    local filters =     {
        {filter="turret", mode = "or"},
        {filter="crafting-machine", mode = "or"},
        {filter="transport-belt-connectable", mode = "or"},
        {filter = "type", type = "inserter", mode="or"},
        {filter = "type", type = "asteroid-collector", mode="or"},
    }

    if settings.global['aspr-include-units'].value == true then
        table.insert(filters,    {filter = "type", type = "unit", mode="or"})
    end

    script.on_event(defines.events.on_entity_damaged,
            function(event)
                add_to_repair_list(event)
            end,
            filters
    )
end


local process_repair_queue = function(event)
    get_repair_pack_prototypes()
    for surface_id, entities in pairs(storage.platform_damaged_entities) do
        local surface = game.surfaces[surface_id]
        if surface and surface.valid then
            local index, entity = next(entities, nil)

            if not index or not surface.platform.hub then
                goto aspr_process_repair_queue_bypass_surface
            end
            
            local inventory = surface.platform.hub.get_inventory(defines.inventory.hub_main)
            local repair_pack_on_ship, drain_rate
            for name, _ in pairs(repair_pack_data) do
                repair_pack_on_ship = inventory.find_item_stack(name)
                if repair_pack_on_ship then
                    local drain_durability = repair_pack_on_ship.item.durability
                    if repair_pack_on_ship.durability > 1500 then
                        drain_durability = 1500
                    end
                    drain_rate = drain_durability
                    break;
                end
            end

            for i = 0, batch_count, 1 do
                if entity and entity.valid then
                    if repair_pack_on_ship and repair_pack_on_ship.valid and repair_pack_on_ship.valid_for_read then
                        repair_pack_on_ship.drain_durability(drain_rate)
                        entity.health = entity.health + drain_rate

                        if entity.get_health_ratio() > 0.9 then
                            storage.platform_damaged_entities[surface_id][index] = nil
                        end 
                    end
                elseif index then
                    storage.platform_damaged_entities[surface_id][index] = nil
                end
                index, entity = next(entities, index)
            end
        else
            storage.platform_damaged_entities[surface_id] = nil
        end

        ::aspr_process_repair_queue_bypass_surface::
    end
end

local create_data_structure = function(event)
    storage.platform_damaged_entities[event.surface_index] = {}
end

local remove_data_structure = function(event)
    storage.platform_damaged_entities[event.surface_index] = nil
end

local ShipRepair = {}
ShipRepair.on_configuration_changed = index_damaged_entities
ShipRepair.on_init = index_damaged_entities
ShipRepair.events = {
    [defines.events.on_runtime_mod_setting_changed] = index_damaged_entities,
    [defines.events.on_surface_created] = create_data_structure,
    [defines.events.on_surface_imported] = create_data_structure,
    [defines.events.on_surface_cleared] = create_data_structure,
    [defines.events.on_surface_deleted] = remove_data_structure,
}
ShipRepair.on_nth_tick = {
    [181] = process_repair_queue,
}
ShipRepair.add_to_repair_list = add_to_repair_list 

return ShipRepair


